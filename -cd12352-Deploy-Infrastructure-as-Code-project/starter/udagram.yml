Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  Bastion:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: udacityvagiproject
      ImageId: ami-005fc0f236362e99f

      SecurityGroupIds:
        - !Ref BastionSecurityGroup

      # Use either any public subnet
      SubnetId:
        Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"

      # this helps us identify which EC2 instance is the Bastion Host
      Tags:
        - Key: Name
          Value: "Bastion Host"

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public SSH access to the bastion host
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      # Allow SSH access to the bastion host
      # Ideally, set the ip address of your local computer. In this case, though,
      # let's just allow any ip address.
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 69.159.96.117/32

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our hosts from the LB Security Group
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecGroup

      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref BastionSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub "${EnvironmentName}-web-servers"
      LaunchTemplateData:
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            mkdir -p /var/www/html
            aws s3 cp s3://udacityinfra-bucket-1012/index.html /var/www/html/index.html
            service nginx start
        ImageId: ami-005fc0f236362e99f
        SecurityGroupIds:
          - !Ref WebServerSecGroup
        InstanceType: t2.micro
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: '2'
      MaxSize: '3'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EC2InstanceCreationAlerts

  MyEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic  # Reference to the SNS Topic
      Protocol: email  # Specify the protocol as 'email'
      Endpoint: vagisha14@gmail.com

  MyCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "EC2InstanceCreationAlarm"
      AlarmDescription: "Alarm when a new EC2 instance is created"
      MetricName: "NumberOfMessagesPublished"
      Namespace: "AWS/SNS"
      Statistic: "Sum"
      Period: 300  # 5 minutes
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref SNSTopic  # Send notification to the SNS topic
      Dimensions:
        - Name: "TopicName"
          Value: !Ref SNSTopic

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.DomainName  # Reference the S3 bucket
            S3OriginConfig:
              OriginAccessIdentity: ""  # Leave empty for public access
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https  # Redirect HTTP to HTTPS
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400  # 1 day
          MaxTTL: 31536000  # 1 year
        ViewerCertificate:
          CloudFrontDefaultCertificate: true  # Use the default CloudFront certificate

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject'
              - 's3:GetObject'
              Resource:
                - !GetAtt S3Bucket.Arn

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebAppInstanceRole

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "udacityinfra-bucket-1012"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false
        RestrictPublicBuckets: true

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs: 

  VPC: 
    Description: AName of S3 bucket
    Value: !Ref S3Bucket

  TargetGroupARN:
    Description: "The ARN of the target group"
    Value: !Ref WebAppTargetGroup

  LoadBalancerARN:
    Description: "The ARN of the Load Balancer"
    Value: !Ref WebAppLB

  LoadBalancerDNS:
    Description: "The DNS of the Load Balancer"
    Value: !Sub "http://${WebAppLB.DNSName}"

  CloudFrontURL:
    Description: "URL of the CloudFront distribution"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"

  SNSTopicARN:
    Description: "ARN of the SNS Topic for EC2 instance creation alerts"
    Value: !Ref SNSTopic